#!/usr/bin/env bash
#
# For stages that are just terraform.
#
# This is just a thin wrapper around terraform that converts Anyform "up" and
# "down" commands into terraform commands.  It also ensures
# `.terraform.lock.hcl` and `terraform output -json` are put in the standard
# locations.
set -euo pipefail

# this_dir is the stage stamp dir.
this_dir="$(dirname "$(readlink -f "$0")")"

function main() {
  cmd="${1:?}"

  : ${ANYFORM_STAGE_NAME:?}
  : ${ANYFORM_OUTPUT_DIR:?}
  : ${ANYFORM_STAGE_STAMP_DIR:?}

  : ${INTERACTIVE:=true}

  local stage_output_dir
  stage_output_dir="$ANYFORM_OUTPUT_DIR/$ANYFORM_STAGE_NAME"

  case "$cmd" in
    up|down) "cmd_$cmd" ;;
    *) echo "ERROR: invalid command: $cmd" >&2; exit 1 ;;
  esac
}

function common_init() {
  if [ -e "$stage_output_dir/.terraform.lock.hcl" ]; then
    cp -at "$ANYFORM_STAGE_STAMP_DIR" "$stage_output_dir/.terraform.lock.hcl"
  fi
  terraform_wrapper init $( [[ "$INTERACTIVE" != false ]] || echo '-input=false' )
  mkdir -p "$stage_output_dir"
  cp -at "$stage_output_dir" ".terraform.lock.hcl"
}

function cmd_up() {
  common_init

  local outfile
  outfile="$stage_output_dir/output.json"
  echo "Running 'terraform apply'"
  terraform_wrapper apply \
    $( [[ "$INTERACTIVE" != false ]] || echo '-input=false -auto-approve' )
  echo "Running 'terraform output -json'"
  if terraform_wrapper output -json > "${outfile}.tmp"; then
    mv "${outfile}.tmp" "$outfile"
  else
    echo "Error: output saved in ${outfile}.tmp" >&2
    exit 1
  fi
}

function cmd_down() {
  common_init

  echo "Running 'terraform destroy'"
  terraform_wrapper destroy \
    $( [[ "$INTERACTIVE" != false ]] || echo '-input=false -auto-approve' )
}

function terraform_wrapper() {
  (
    cd "$ANYFORM_STAGE_STAMP_DIR"
    terraform "$@"
  )
}

main "$@"

